import operator 
Dna = [
'AGACCGCGGCTGATTATGCCGTCGGCATACTGGAACTCTTGAGCCTACCGAATCTGCAGTGGTATTAACCTTGGGTTGGCCTAGATGAGAGGGCATGAACGTGCATACTTGCAGTAAGCCTATAAGTCGTACCATTGTTGCCGCGATACGTCTCCG',
'ACCGGCCCCACTCGCCTTACAACATTCGGGAGGATAACTTGGGATATTTGCGAAGTACACGGCTGCAACTTGCATAATCACCGGCGTTCTAGACTGTTATGTTAAGATCTCAACCAAATGTCTTTTTTATCTGTGGTGACCTACGGACTCCGGGCC',
'ACAAGAACGCCGCCAAAACACCGGGTCAGTGGTCCACAACTCGACACTGGGACGCCCCAAAAGCTGTGTCCGGTAGGCGGCGTTGTTTTAGACCAGCCGGTGGGAGCAGCCTGAGGCCCTTCTCCGGCAACCTAGAAGGCGAGGGTGCTGACCTAA',
'GAGCCAGTGAGCATCGTTAATCATCACGGACCATACTAGCTGTATATCGGCCCTGCCGGAGGTGAGTGTTCGGAGCTGCCCTACTAGGATGCATTGGAGAAAGAGCGAACAGCATCGCGATTAACGCGTAAGTGTTATGGACTTGTGGCTTATAAC',
'ACGGAGCAACGCGAATCCCGAGCAGTCCACACGTTGACTCTAGGAGTACACTTGGAACTCACGGAGGATCGAATCCGCGGCTAGTAGGAAGATCCCGTTGCGGTTGGACTGCGAATATATGCGATCTTAATCGACAGTACAGAAGGGCTGTCCTAG',
'CAGGACCATAGCCGGGGCCTGGGGCTTGAAGGTAAATGTATACCGATTTCGGTATACCTGTATACCTTAACTTCATCCGAAGTTGTGATGGCCTATCGGCAATCTCCTAGCTCTGGATGATTGTTAATGGTCCCGCACCCTCCTTCAGGTAATTGA',
'CAGTGGGACCGTTATGGCGCTGGTGATGCTAACCGACACGGTACGTTGCCGCGCGCTACTAGACCAGAATGCACGGATGCTAAAAGTCAGGTTGTGAACAGACTTTAAATTACGAGGTACGAGTTGCCCTAGGGCATCGAACAAACTTGTCGGTGT',
'ACTGAATTACCGACATTGCGGGCCACCGTGATTCCACGTAATACTTTAGATCAGACGTGTAAACGGGGTGGGGAAAGACCTTAGGCACGTGAATTCGGTCCAAGTAAGGTGCTGACCTAGAGAGGCCTTAGGTGTCTCGCTTTAAACCTCCAGCGC',
'TTTAAGATCGGCACAGATTGTGGCCCTGCCCAATCGTTACAGCACAAATACGGATATATAGGGTTGGCCTAACCGTGAGGAGGCGCAATACACCCGACTAGATTGATATCCGGGAACTCACATTGAATTTCGCCGTTCCTTATGTGGAGTGACCTA',
'CCAGGATTCCAGGTCCAACAGGAGGTGTACCACAAAGCTGTCCCACGAACCATAAGGTCCAGCTCGCTATTACGGTAACGTATTCCGCGATAACATGGGATGGCCTATTGATCCTATCCACGACCGGCTATTACGGCACGCCCCGCTCGAGACATT',
'GGCCTTATTGGTTCAGGCTAAGGTACAATGAGTAAGCTATAAGTAGGCATATGCCCCTACCCCGCGGACATTCGATGAGCGCTTTTAGCCCGCCTGCCGGTAAGCGCAATCTGTTCGAAGTCGGGGTGGACAGCGCTGACCTAAGTCAGGGTTGCT',
'ATCCTGGCATACCTTACAGCGTCGAGGATCCCCTGGGTGTTGCCCTATATACGTAATCGTGATTCGGGATGTGCTCACAGGTGAGCGAAATGCTCGGCCTACGTTGTTCATTCAGTGGAACCACGATTCCAACTGAGTATAGTGAAGTTCTCAATT',
'GCATTCTAAACTGAGATGACCTAGCAAATTGGATCAGTAGCCCACCTTATCCGTCGCTCCTTGAGGCGCCGCTTCGGGAGTCAGTTTAAGCACAGAATAGTGACACCTTGTGTATAAAAACAGGCAGCTAAGAAGGGCAATCTCCAGTTGCTGGCA',
'TCCTATATGGCGTCGTAAAGTTGGGAAGTACGCTAACGGTCGCGGCATCATAGTGGTGGTGGGGACTATGCGAAGCGATGGGCAAAAATCATGGGAGTGATGCCCTATATGCTACACGTAAAGTGGCCTTCTCAATTTCGGGACGACGCCGGATCA',
'CCCCGTCCTCGACTCTGGAGTGAGACAGCCCAGAGCCCCTTTTGTGCTTGAGCCTTCGTCAACACGTTTAATTGAGCAAATCACGGTGACATAATTAGATACTTTCTGACCATCAGAGCCGCAGCCAATTTTGTTACGAGTGTCGTGTTGCCCTAG',
'GGTCAAGAACCCTGCATACTCTGTGCGCTGCCCTATTTGACAGCTGAACCCACGCGCGCGATAGTAGAACGTCCAAGGTCGTAGTGTAGGCATTGTCTGATCGAAATAACTAGGCGTGTTTGTGACTTCAGAGCGAGTTCCCTGTTCGTTCCGGCG',
'GCGAAAAGGCTTTATATGCTCGTCTAAGAACCATTGGAACTAGGCATCGACATAGGAATTTCTTACCTTATATCAGGCTGAAACGAGATGCCCTATACTGGGATAGCTAGCGCCAAACCAAACATACCGCCCAAGTCCGCCATCGTTCAACCTCTC',
'GCGATGGCCTAGTAAGCGGGTGCCCTAAACAACCTGCGACGCGAGGTTCCACGTCATACGGTATATGCTAGCTAATCGCGTGTCCCTGCAAAGGAAGAGGCATGGCTGAGATCGCACATATTGAATGTGTGAGAATTCAACGGTACGGCAGGGCGT',
'ATTGTTGAACATGCGATGGCCTATGTCGCGCGCTAGAGCAACTCGCATCTAGAGCGGACCGCCAGGCCGGCTCGCTTGACGACTTTGTATCCCGTCAGTTCTAGTCTGGTCGAGAGAAACTAGTGACAAACAGCATGGGCCGTGGCAACCTAGAAA',
'TGACGACAAGAACCCCGAGAAAGGCCACTAGCGGGGCTTAATGAACACGTAGCTACGCTGGGAACGTCACCTGTCATGGACCCTTCTTCGGTGCAACCAATATACCCGGCGTTGTCCTAGCTAGTCCACCTCAGATGGAGGTCAGTTGATAAGTAG',
'ACGGCATCCTCTACTCCCAACTCATACTGGTTACCCCTACCTAGCCCTTACCTACCTTTCCTATTTACTGCTTTCACTTGTGCGCGGGGGTGACAGGCGATGTCCTACCCCTGCGCCACAAACGTTCATTCCCCGCCTTCACTATCGCACAACCAT',
'AGGGATAGTTGCGACAGTAATGCGACACTAGCCGACACAGCTCTTTGGACATGATACATTTTGGGTCGCAGCTCCCACACAGCCAGGCGGTACTCGGAGGTGTCCTAGTAATCCTCCGTTGGAGTGCTCCTCTCGTACTCGCCGCTTCTAGGCTGC',
'ACTGGTTTCAGGGCTCTTTGCGTGTCGCTACCGGATAGCTTAACCTAGACACGCGTGTATGGGGTATTACCCTAGGGAGCCTTCGCGCTGACCTATCAAACGCTGTTAAAGAACGCATTCTATTATACGTCGAGTCGGCGAGTGAACCAGTTTTTC',
'GGTTGATTTGGCGAGCTGGCCTATAAAGAAGCACGGGTTTCGAGTCTGATACCAAGGGTGTAATGATTCAGCGAGTACAGTCGAGCACGGGGCAGCGCTGGAATATCACATGGTCTGCAGTACGGACTGTCTAACGTCTTTGAGCTATGTATACCT',
'GATGCGAAATGCCGCCTTAAGAACTCATCCGCGTCTGAATGGTTTTTTCACTGGCCCTTGGGTCGTGGGTGGATAACTACCCACGTCTCAATGTCTCTATTGCATAGAAGTGCGGATCCCAGGCATATCGTTGTGGTGTCCTAAGACCGTGTCTGG']
k = 12
t = 25

def probableKmer(Text, k, Profile):
    bases = {}
    bases['A'] = 0
    bases['C'] = 1
    bases['G'] = 2
    bases['T'] = 3
    
    def countScore(kmer):
        mostProbable = [Profile[i][bases[k]] for i,k in enumerate(kmer)]
        return reduce(operator.mul, mostProbable, 1)
        
    mostProbable = []
    for i in range(k, len(Text)+1):
        mostProbable.append((Text[i-k:i], countScore(Text[i-k:i])))
        
    return max(mostProbable, key = lambda c:c[1])[0]
    
def profile(motifs):
    matrix = [''.join(sequence) for sequence in zip(*motifs)]
    return [[float(col.count(bases))/float(len(col)) for bases in 'ACGT'] for col in matrix]

def getScore(motifs):
    matrix = [''.join(sequence) for sequence in zip(*motifs)]
    max_count = sum([max([m.count(bases) for bases in 'ACGT']) for m in matrix])
    return len(motifs[0])*len(motifs)-max_count
    
    
def greedyMotifSearch(Dna, k, t):
    bestScore = t*k
    for i in xrange(len(Dna[0])-k+1):
        motifs = [Dna[0][i:i+k]]
        
        for j in xrange(1,t):
            currProf = profile(motifs)
            motifs.append(probableKmer(Dna[j], k, currProf))
            
        currentScore = getScore(motifs)
        if currentScore < bestScore:
            bestScore = currentScore
            bestMotifs = motifs 
            
    return bestMotifs
    
bestMotifs = greedyMotifSearch(Dna, k, t)
print '\n'.join(bestMotifs)


